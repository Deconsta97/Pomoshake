{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\deco_\\\\NLW\\\\pomoshake-next\\\\src\\\\contexts\\\\CountdownContext.tsx\";\nimport { ChallengesContext } from \"./ChallengesContext\";\nimport { createContext, useContext, useEffect, useState } from \"react\";\nexport const CountdownContext = /*#__PURE__*/createContext({});\nlet coutdownTimeout;\nexport function CountDownProvider({\n  children\n}) {\n  const {\n    startNewChallenge\n  } = useContext(ChallengesContext);\n  const {\n    0: time,\n    1: setTime\n  } = useState(0.05 * 60);\n  const {\n    0: isActive,\n    1: setIsActive\n  } = useState(false);\n  const {\n    0: hasFinished,\n    1: setHasFinished\n  } = useState(false);\n  const minutes = Math.floor(time / 60);\n  const seconds = time % 60;\n\n  function startCountdown() {\n    setIsActive(true);\n  }\n\n  function resetCountdown() {\n    clearTimeout(coutdownTimeout);\n    setIsActive(false);\n    setHasFinished(false);\n    alert;\n    setTime(0.05 * 60);\n  }\n\n  useEffect(() => {\n    if (isActive && time > 0) {\n      coutdownTimeout = setTimeout(() => {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time === 0) {\n      setHasFinished(true);\n      setIsActive(false);\n      startNewChallenge();\n    }\n  }, [isActive, time]);\n  return /*#__PURE__*/_jsxDEV(CountdownContext.Provider, {\n    value: {\n      minutes,\n      seconds,\n      hasFinished,\n      isActive,\n      startCountdown,\n      resetCountdown\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["C:/Users/deco_/NLW/pomoshake-next/src/contexts/CountdownContext.tsx"],"names":["ChallengesContext","createContext","useContext","useEffect","useState","CountdownContext","coutdownTimeout","CountDownProvider","children","startNewChallenge","time","setTime","isActive","setIsActive","hasFinished","setHasFinished","minutes","Math","floor","seconds","startCountdown","resetCountdown","clearTimeout","alert","setTimeout"],"mappings":";;AAAA,SAASA,iBAAT,QAAkC,qBAAlC;AAEA,SACEC,aADF,EAGEC,UAHF,EAIEC,SAJF,EAKEC,QALF,QAMO,OANP;AAqBA,OAAO,MAAMC,gBAAgB,gBAAGJ,aAAa,CAAC,EAAD,CAAtC;AAEP,IAAIK,eAAJ;AAEA,OAAO,SAASC,iBAAT,CAA2B;AAAEC,EAAAA;AAAF,CAA3B,EAAiE;AACtE,QAAM;AAAEC,IAAAA;AAAF,MAAwBP,UAAU,CAACF,iBAAD,CAAxC;AACA,QAAM;AAAA,OAACU,IAAD;AAAA,OAAOC;AAAP,MAAkBP,QAAQ,CAAC,OAAO,EAAR,CAAhC;AACA,QAAM;AAAA,OAACQ,QAAD;AAAA,OAAWC;AAAX,MAA0BT,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM;AAAA,OAACU,WAAD;AAAA,OAAcC;AAAd,MAAgCX,QAAQ,CAAC,KAAD,CAA9C;AAEA,QAAMY,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWR,IAAI,GAAG,EAAlB,CAAhB;AACA,QAAMS,OAAO,GAAGT,IAAI,GAAG,EAAvB;;AAEA,WAASU,cAAT,GAA0B;AACxBP,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD;;AAED,WAASQ,cAAT,GAA0B;AACxBC,IAAAA,YAAY,CAAChB,eAAD,CAAZ;AACAO,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAE,IAAAA,cAAc,CAAC,KAAD,CAAd;AACAQ,IAAAA,KAAK;AACLZ,IAAAA,OAAO,CAAC,OAAO,EAAR,CAAP;AACD;;AAEDR,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,QAAQ,IAAIF,IAAI,GAAG,CAAvB,EAA0B;AACxBJ,MAAAA,eAAe,GAAGkB,UAAU,CAAC,MAAM;AACjCb,QAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACD,OAF2B,EAEzB,IAFyB,CAA5B;AAGD,KAJD,MAIO,IAAIE,QAAQ,IAAIF,IAAI,KAAK,CAAzB,EAA4B;AACjCK,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAJ,MAAAA,iBAAiB;AAClB;AACF,GAVQ,EAUN,CAACG,QAAD,EAAWF,IAAX,CAVM,CAAT;AAYA,sBACE,QAAC,gBAAD,CAAkB,QAAlB;AACE,IAAA,KAAK,EAAE;AACLM,MAAAA,OADK;AAELG,MAAAA,OAFK;AAGLL,MAAAA,WAHK;AAILF,MAAAA,QAJK;AAKLQ,MAAAA,cALK;AAMLC,MAAAA;AANK,KADT;AAAA,cAUGb;AAVH;AAAA;AAAA;AAAA;AAAA,UADF;AAcD","sourcesContent":["import { ChallengesContext } from \"./ChallengesContext\";\r\n\r\nimport {\r\n  createContext,\r\n  ReactNode,\r\n  useContext,\r\n  useEffect,\r\n  useState,\r\n} from \"react\";\r\n\r\ntype CountdownContextData = {\r\n  minutes: number;\r\n  seconds: number;\r\n  hasFinished: boolean;\r\n  isActive: boolean;\r\n  startCountdown: () => void;\r\n  resetCountdown: () => void;\r\n};\r\n\r\ntype CountdownProviderProps = {\r\n  children: ReactNode;\r\n};\r\n\r\nexport const CountdownContext = createContext({} as CountdownContextData);\r\n\r\nlet coutdownTimeout: NodeJS.Timeout;\r\n\r\nexport function CountDownProvider({ children }: CountdownProviderProps) {\r\n  const { startNewChallenge } = useContext(ChallengesContext);\r\n  const [time, setTime] = useState(0.05 * 60);\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [hasFinished, setHasFinished] = useState(false);\r\n\r\n  const minutes = Math.floor(time / 60);\r\n  const seconds = time % 60;\r\n\r\n  function startCountdown() {\r\n    setIsActive(true);\r\n  }\r\n\r\n  function resetCountdown() {\r\n    clearTimeout(coutdownTimeout);\r\n    setIsActive(false);\r\n    setHasFinished(false);\r\n    alert\r\n    setTime(0.05 * 60);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (isActive && time > 0) {\r\n      coutdownTimeout = setTimeout(() => {\r\n        setTime(time - 1);\r\n      }, 1000);\r\n    } else if (isActive && time === 0) {\r\n      setHasFinished(true);\r\n      setIsActive(false);\r\n      startNewChallenge();\r\n    }\r\n  }, [isActive, time]);\r\n\r\n  return (\r\n    <CountdownContext.Provider\r\n      value={{\r\n        minutes,\r\n        seconds,\r\n        hasFinished,\r\n        isActive,\r\n        startCountdown,\r\n        resetCountdown,\r\n      }}\r\n    >\r\n      {children}\r\n    </CountdownContext.Provider>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}